%% Random Matlab cheat sheet %%

%% #1 Tips..

%% Getting values from column #1 (values lying from top to bottom of a column):
r_79ts_blk1(:,1) % colon comes before comma and number, to indicate "down a column", in this case, column # = 1

%% Getting values from row #1 (values lying from left to right along a row):
trial1_alt(1,:) %  colon lies AFTER the number and comma, to indicate "along a row", in this case: row # = 1

%% Getting mean across columns (i.e. along a row from left to right):
Res_trial_mean_blk1=mean(r_79ts_blk1,2); % 2 is the command to get the mean across columns (so, 1 would be to get the mean done the column?)




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%% #2 Getting an array of boundary pixel locations:
% use viewpoint_face_image.jpg (saved separately) to run this script

% upload image to matlab

I = imread('viewpoint_face_image.jpg'); % Read grayscale image into the workspace.
imshow(I); %confirm image

BW=im2bw(I); % Convert grayscale image to binary image (using local adaptive thresholding).
                % Note: this works in older matlab versions (pre-2016a)
                % Note: the "imbinarize" function can replace "im2bw" in
                        % the 2016a version
imshow(BW); %confirm binary image  

B = bwboundaries(BW); % Returns B, a cell array of boundary pixel locations
                        % of parent, child and hole 
                        % (refer: https://www.mathworks.com/help/images/ref/bwboundaries.html#inputarg_conn
                        % for definitions)
                        

% Note re: B cell array format: Row and column coordinates of boundary pixels, returned as a P-by-1 cell array, where P is the number of objects and holes. 
       %Each cell in the cell array contains a Q-by-2 matrix. 
       %Each row in the matrix contains the row and column coordinates of a boundary pixel. 
       %Q is the number of boundary pixels for the corresponding region.
       
% ^ Since row number = region number of a given object, you can match both by overlaying the region numbers on the image:
[B,L,N,A] = bwboundaries(BW); 

imshow(BW); hold on;
colors=['b' 'g' 'r' 'c' 'm' 'y'];
for k=1:length(B),
  boundary = B{k};
  cidx = mod(k,length(colors))+1;
  plot(boundary(:,2), boundary(:,1),...
       colors(cidx),'LineWidth',2);

  %randomize text position for better visibility
  rndRow = ceil(length(boundary)/(mod(rand*k,7)+1));
  col = boundary(rndRow,2); row = boundary(rndRow,1);
  h = text(col+1, row-1, num2str(L(row,col)));
  set(h,'Color',colors(cidx),'FontSize',14,'FontWeight','bold');
end

%% Tracing continuous PARENT boundaries (red) of the image and hole boundaries (green) within the parent image:

% Parent boundary= red
% hole boundaries = green

[B,L,N,A] = bwboundaries(BW);
figure; imshow(BW); hold on;
% Loop through object boundaries
for k = 1:N
    % Boundary k is the parent of a hole if the k-th column
    % of the adjacency matrix A contains a non-zero element
    if (nnz(A(:,k)) > 0)
        boundary = B{k};
        plot(boundary(:,2),...
            boundary(:,1),'r','LineWidth',2);
        % Loop through the children of boundary k
        for l = find(A(:,k))'
            boundary = B{l};
            plot(boundary(:,2),...
                boundary(:,1),'g','LineWidth',2);
        end
    end
end

%% Tracing ALL continuous OBJECT boundaries (red) of the image and hole boundaries (green) within the parent image:

[B,L,N] = bwboundaries(BW);
imshow(BW); hold on;
for k=1:length(B),
   boundary = B{k};
   if(k > N)
     plot(boundary(:,2), boundary(:,1), 'g','LineWidth',2);
   else
     plot(boundary(:,2), boundary(:,1), 'r','LineWidth',2);
   end
end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5





%% #3 Sample script to collect and store value in cell 1 (intersection b/w row
%% 1 and column 1) after iterating across a cell array (see below for structure of data)..

%% Structure of data:
% Cell array called statcNovelData has 100 nested cells (i.e. trials) within it.
% These nested cells are arranged next to each other, horizontally
%^ each of those nested cells contains a [n x3] format of elements, where
   %n, i.e. no. of rows varies and no. of columns = 3
   
%% Purpose of this bit of script: get all target values in intersection of 1st row and 1st column within each nested cell (i.e. trial)   
    

for t=1:size(staticNovelData,2);%possibly defining direction of looping, i.e. in this case by column, i.e. horizontally from left to right
Trial=staticNovelData{t};% getting all data [data worth: nx3]from each nested cell, i.e. trial
FirstRowSRT(t,:)=[Trial(1,1)] %this gets target value from each nested cell (trial) + and actually stores them ALL in a matrix (vertically)
end


%% FYI:
% Another way of defining size of output, used in the past BEFORE the
% for-loop (possibly redundant here, because last line before "end" does
% that for us):
datacell=cell(size(staticNovelData)); % defining the size of the output matrix
size(datacell)



